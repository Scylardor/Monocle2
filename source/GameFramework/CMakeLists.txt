cmake_minimum_required(VERSION 3.16) # 3.16 is needed for target_precompile_headers

set(GAMEFRAMEWORK_TARGET ${PROJECT_NAME}_GameFramework)
set(SOURCE_DIR .)

# This .cmake includes and defines the ${PROJECT_NAME}_SOURCES variable !
# It is generated by the generate_cmake_sources script.
include(CMake/CMakeLists_sources.cmake)


# Build a Monocle Library and setup boilerplate Monocle target configurations (warning level, LTCG etc.)
monocle_add_library(${MONOCLE_LIB_TYPE} ${GAMEFRAMEWORK_TARGET} "${${GAMEFRAMEWORK_TARGET}_SOURCES}")
monocle_target_compile_config(${GAMEFRAMEWORK_TARGET})

# Create the source groups for source tree with root at CMAKE_CURRENT_SOURCE_DIR
# to recreate the folder tree with filters within Visual Studio for example.
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${${GAMEFRAMEWORK_TARGET}_SOURCES})

# If using Assimp, integrate it in the build
if(${PROJECT_NAME}_USE_ASSIMP_IMPORTER)
	monocle_include_assimp(${GAMEFRAMEWORK_TARGET})
endif()

# This library uses Core
target_link_libraries(${GAMEFRAMEWORK_TARGET}
	PUBLIC	${PROJECT_NAME}_Core
			${PROJECT_NAME}_Graphics
			${PROJECT_NAME}_Application
	PRIVATE ${PROJECT_NAME})  # Linking with project's Interface Library allows us to reuse PCH's.
