cmake_minimum_required(VERSION 3.16) # 3.16 is needed for target_precompile_headers

set(GRAPHICS_TARGET ${PROJECT_NAME}_Graphics)

# This .cmake includes and defines the ${PROJECT_NAME}_SOURCES variable !
# It is generated by the generate_cmake_sources script.
include(CMake/CMakeLists_sources.cmake)

monocle_add_library(${MONOCLE_LIB_TYPE} ${GRAPHICS_TARGET} "${${GRAPHICS_TARGET}_SOURCES}")

# Find Assimp library

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/CMake")


# Create the source groups for source tree with root at CMAKE_CURRENT_SOURCE_DIR
# to recreate the folder tree with filters within Visual Studio for example.
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${${GRAPHICS_TARGET}_SOURCES})

# Libraries used by this target
target_link_libraries(${GRAPHICS_TARGET}
	PUBLIC	${PROJECT_NAME}_Core
			${PROJECT_NAME}_Math
	PRIVATE ${PROJECT_NAME}) # Linking with project's Interface Library allows us to reuse PCH's.

# Integrate GLAD OpenGL function pointer loader into Graphics library if we wanna use OpenGL.
if(${PROJECT_NAME}_USE_OPENGL)
	find_package(OpenGL REQUIRED)

	# It should be possible to make this link private...
	target_link_libraries(${GRAPHICS_TARGET} PUBLIC GLAD)
endif()

if(${PROJECT_NAME}_USE_VULKAN)
	find_package(Vulkan REQUIRED)
	target_link_libraries(${GRAPHICS_TARGET} PUBLIC Vulkan::Vulkan)
endif()

# Setup boilerplate Monocle target configurations (warning level, LTCG etc.)
monocle_target_compile_config(${GRAPHICS_TARGET})

# If using Assimp, integrate it in the build
if(${PROJECT_NAME}_USE_ASSIMP_IMPORTER)
	monocle_include_assimp(${GRAPHICS_TARGET})
endif()

# If using STB, integrate it in the build
if(${PROJECT_NAME}_USE_STB_IMAGE_IMPORTER)
	target_include_directories(${GRAPHICS_TARGET} PUBLIC "${PROJECT_SOURCE_DIR}/vendor/stb")
endif()

# Integrate ImGUI into the build.
add_library(ImGui STATIC EXCLUDE_FROM_ALL
	"${PROJECT_SOURCE_DIR}/vendor/imgui/imgui.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/imgui_demo.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/imgui_draw.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/imgui_tables.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/imgui_widgets.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/backends/imgui_impl_glfw.cpp"
	"${PROJECT_SOURCE_DIR}/vendor/imgui/backends/imgui_impl_opengl3.cpp"
)

target_include_directories(ImGui
							PUBLIC "${PROJECT_SOURCE_DIR}/vendor/imgui" # Needs to be PUBLIC because imgui glfw files depend themselves on the include dir
							PRIVATE ${GLFW3_INCLUDE_DIR} # Needed by imgui glfw files
							)

target_link_libraries(${GRAPHICS_TARGET} PUBLIC ImGui)
