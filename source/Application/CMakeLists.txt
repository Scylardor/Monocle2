cmake_minimum_required(VERSION 3.16) # 3.16 is needed for target_precompile_headers

set(APPS_TARGET ${PROJECT_NAME}_Application)
set(SOURCE_DIR .)

# This .cmake includes and defines the ${PROJECT_NAME}_SOURCES variable !
# It is generated by the generate_cmake_sources script.
include(CMake/CMakeLists_sources.cmake)

if(${PROJECT_NAME}_BUILD_SHARED_LIB)
add_library(${APPS_TARGET} SHARED ${${APPS_TARGET}_SOURCES} )
else()
add_library(${APPS_TARGET} STATIC ${${APPS_TARGET}_SOURCES} )
endif()

# Create the source groups for source tree with root at CMAKE_CURRENT_SOURCE_DIR
# to recreate the folder tree with filters within Visual Studio for example.
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${${APPS_TARGET}_SOURCES})

target_include_directories(${APPS_TARGET} PRIVATE ${PROJECT_SOURCE_DIR}/source)

target_link_libraries(${APPS_TARGET} PUBLIC
	${PROJECT_NAME}_Core
	${PROJECT_NAME}_Input)

# If using GLFW, integrate it in the build

if(${PROJECT_NAME}_USE_GLFW)
	set(GLFW_DIR ${PROJECT_SOURCE_DIR}/vendor/glfw)

	target_include_directories(${APPS_TARGET} PUBLIC "${GLFW_DIR}/include")

	target_link_directories(${APPS_TARGET} PUBLIC ${GLFW_DIR})

	target_link_libraries(${APPS_TARGET} PUBLIC glfw3)
endif()

# Also integrate GLAD function pointer loader if we're using OpenGL because we need it to load OpenGL.
if(${PROJECT_NAME}_USE_OPENGL)
	set(GLAD_DIR ${PROJECT_SOURCE_DIR}/vendor/glad45)
	set(GLAD_SOURCE ${GLAD_DIR}/src/glad.c)

	target_include_directories(${APPS_TARGET} PUBLIC "${GLAD_DIR}/include")

	target_sources(${APPS_TARGET} PUBLIC ${GLAD_SOURCE})
	set_source_files_properties( ${GLAD_SOURCE} PROPERTIES LANGUAGE CXX )
endif()



# use the main target's precompiled header.
target_precompile_headers(${APPS_TARGET} REUSE_FROM ${PROJECT_NAME})